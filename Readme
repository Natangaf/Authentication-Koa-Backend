# Koa.js User Management API with AWS Cognito

Este projeto é uma API de gerenciamento de usuários construída com Node.js, Koa.js e PostgreSQL. Ele integra a autenticação de usuários usando AWS Cognito e utiliza TypeORM para gerenciar o banco de dados.

## Tecnologias Usadas

- **Node.js**: Ambiente de execução para JavaScript no lado do servidor.
- **Koa.js**: Framework web para Node.js.
- **PostgreSQL**: Banco de dados relacional.
- **TypeORM**: ORM para TypeScript e JavaScript.
- **AWS Cognito**: Serviço de autenticação e gerenciamento de usuários da AWS.
- **Docker**: Containerização da aplicação e do banco de dados.

## Requisitos

- Node.js (v14 ou superior)
- Docker e Docker Compose
- Conta na AWS para configurar o Cognito

## Estrutura do Projeto

```
/your-repo-name
  /src
    /controllers
    /middlewares
    /routes
    /models
    /config
    index.js
  .env
  docker-compose.yml
  Dockerfile
```

## Instalação

1. Clone o repositório:
   ```bash
   git clone https://github.com/seuusuario/aws-cognito-koa-backend.git
   cd aws-cognito-koa-backend
   ```

2. Instale as dependências:
   ```bash
   npm install
   ```

3. Configure o arquivo `.env` com suas credenciais e configurações do AWS Cognito:
   ```env
   AWS_REGION=your_aws_region
   COGNITO_USER_POOL_ID=your_user_pool_id
   COGNITO_JWT_SECRET=your_jwt_secret
   DATABASE_URL=postgres://user:password@db:5432/mydatabase
   ```

4. Inicie o ambiente com Docker Compose:
   ```bash
   docker-compose up --build
   ```

## Rotas da API

- `POST /auth`: Rota pública para autenticar ou registrar um usuário.
- `GET /me`: Rota protegida que retorna as informações do usuário autenticado.
- `PUT /edit-account`: Rota protegida que permite ao usuário editar sua conta.
- `GET /users`: Rota protegida que retorna todos os usuários cadastrados (acesso restrito a administradores).

## Middleware de Autorização

A API inclui um middleware que verifica o JWT gerado pelo AWS Cognito para proteger as rotas e garantir que apenas usuários autenticados possam acessá-las.

## Documentação da API

A documentação da API pode ser acessada através do [Postman](https://www.postman.com) ou utilizando Swagger (caso tenha implementado).

## Testes

Este projeto pode incluir testes unitários e E2E. Utilize Jest ou Mocha para executar os testes.

## Contribuição

Contribuições são bem-vindas! Sinta-se à vontade para abrir issues ou pull requests.

## Licença

Este projeto está licenciado sob a MIT License - veja o arquivo [LICENSE](LICENSE) para mais detalhes.

## Autor

[Natã Fernandes](https://github.com/natangadev)
